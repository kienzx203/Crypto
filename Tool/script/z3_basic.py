from cgitb import html
from z3 import *
x = Int('x')
y = Int('y')
solve(x > 2, y < 10, x + 2*y == 7)
print("---------------------------------------------------------------")
x = Int('x')
y = Int('y')
print(simplify(x + y + 2*x + 3))
print(simplify(x < y + x + 2))
print(simplify(And(x + 1 >= 3, x**2 + x**2 + y**2 + 2 >= 5)))
print("---------------------------------------------------------------")
x = Int('x')
y = Int('y')
z = Int('z')
n = x + y + z >= 3
print("num args: ", n.num_args())
print("children: ", n.children())
print("1st child:", n.arg(0))
print("2nd child:", n.arg(1))
print("operator: ", n.decl())
print("op name:  ", n.decl().name())
print("---------------------------------------------------------------")
x = Real('x')
y = Real('y')
solve(x**2 + y**2 > 3, x**3 == 2)
set_option(precision=30)
print("Solving, and displaying result with 30 decimal places")
solve(x**2 + y**2 == 3, x**3 == 2)
print("---------------------------------------------------------------")
print(1/3)
print(RealVal(1)/3)
print(Q(1, 3))

x = Real('x')
print(x + 1/3)
print(x + Q(1, 3))
print(x + "1/3")
print(x + 0.25)
print("---------------------------------------------------------------")
print("#####################----LOGIC----#############################")
p = Bool('p')
q = Bool('q')
r = Bool('r')
solve(Implies(p, q), r == Not(q), Or(Not(p), r))
print("---------------------------------------------------------------")
p = Bool('p')
q = Bool('q')
print(And(p, q, True))
print(simplify(And(p, q, True)))
print(simplify(And(p, False)))
p = Bool('p')
x = Real('x')
solve(Or(x < 5, x > 10), Or(p, x**2 == 2), Not(p))
print("---------------------------------------------------------------")
print("#####################----Solvers----#############################")
x = Int("x")
y = Int("y")
s = Solver()

s.add(x > 10, y == x+2)
print(s)
print(s.check())
print("---------------------------------------------------------------")
x, y, z = Reals('x y z')
s = Solver()
s.add(x > 1, y > 1, x + y > 3, z - x < 10)
print(s.check())

m = s.model()
print("x = %s" % m[x])

print("traversing model...")
for d in m.decls():
    print("%s = %s" % (d.name(), m[d]))

print("-------------------------------Arithmetic---------------------------------")
x = Real('x')
y = Int('y')
a, b, c = Reals('a b c')
s, r = Ints('s r')
print(x + y + 1 + (a + s))
print(ToReal(y) + c)
print("--------------------------------------------------------------------------")
x, y = Reals('x y')
# Put expression in sum-of-monomials form
t = simplify((x + y)**3, som=True)
print(t)
# Use power operator
t = simplify(t, mul_to_power=True)
print(t)
print("--------------------------------------------------------------------------")
x, y = Reals('x y')
solve(x + 10000000000000000000000 == y, y > 20000000000000000)

print(Sqrt(2) + Sqrt(3))
print(simplify(Sqrt(2) + Sqrt(3)))
print("--------------------------Machine Arithmetic------------------------------")

x = BitVec('x', 16)
y = BitVec('y', 16)
print(x + 20)
# Internal representation
a = BitVecVal(-1, 16)
b = BitVecVal(65535, 16)
print(simplify(a == b))

a = BitVecVal(-1, 32)
b = BitVecVal(65535, 32)
# -1 is not equal to 65535 for 32-bit integers
print(simplify(a == b))
print("--------------------------------------------------------------------------")
x, y = BitVecs('x y', 32)
solve(x >> 2 == 3)
solve(x << 2 == 3)
solve(x << 2 == 24)
print("----------------------------------Function--------------------------------")
x = Int('x')
y = Int('y')
f = Function('f', IntSort(), IntSort())
s = Solver()
s.add(f(f(x)) == x, f(x) == y, x != y)
print(s.check())
m = s.model()
print("f(f(x)) =", m.evaluate(f(f(x))))
print("f(x)    =", m.evaluate(f(x)))

print("--------------------------------------------------------------------------")
X = IntVector('x', 5)
Y = RealVector('y', 5)
P = BoolVector('p', 5)
print(X)
print(Y)
print(P)
print([y**2 for y in Y])
print(Sum([y**2 for y in Y]))
print("---------------------------END--------------------------------------")

