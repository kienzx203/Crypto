from Crypto.Util.number import bytes_to_long
from z3 import *

msg = 'Hi im xxxx'
msg = msg.replace('x', '\x00')
msg = bytes(msg, 'utf-8')
msg = bytes_to_long(msg)
print(msg)

N = 104237499678042533743275809982783883924480986889539289797325422594090175106527740057679738592668008651766347497886685933435127297019865963564295049545118142110594144667767717876489190199866996483342002350301254382123057589351031790472347158615662891088346223252828197344147691119599391648412634062556873271467

e = 5

C = 4675313024768647763022602752865322642504265647416662809389700983190343798631060177578371154784798189118476506503093551
x = Int('x')

f = pow(341949630412219932999680+x, e, N)-C

# Define the constraints (if any)
# For example, let's say we want to find the value of x such that f(x) = 0
s = Solver()
s.add(f == 0)

# Check if there is a solution
if s.check() == sat:
    # Get the solution
    m = s.model()
    print("x = ", m[x])
else:
    print("unsat")
